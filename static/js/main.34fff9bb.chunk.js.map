{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["synth","Tone","octaves","pitchDecay","envelope","release","toDestination","time","triggerAttackRelease","start","App","useState","haveSatisfiedUserInteraction","setSatisfiedUserInteraction","bpm","setBpm","isPlaying","setPlaying","buttonPressed","setButtonPressed","togglePlay","useCallback","prevState","handleKeyPress","key","value","setTimeout","useEffect","window","addEventListener","removeEventListener","stop","className","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iQAIMA,G,OAAQ,IAAIC,IAAmB,CACnCC,QAAS,KACTC,WAAY,MACZC,SAAU,CAAEC,QAAS,MACpBC,iBAGU,IAAIL,KAAU,SAACM,GAC1BP,EAAMQ,qBAAqB,KAAM,MAAOD,KACvC,MAAME,QA0HMC,MAxHf,WAAgB,IAAD,EACuDC,oBAClE,GAFW,mBACNC,EADM,KACwBC,EADxB,OAISF,mBAAS,KAJlB,mBAING,EAJM,KAIDC,EAJC,OAKmBJ,oBAAS,GAL5B,mBAKNK,EALM,KAKKC,EALL,OAM6BN,mBAAS,MANtC,mBAMNO,EANM,KAMSC,EANT,KAQPC,EAAaC,uBAAY,WAGxBT,IACHX,MACAY,GAA4B,SAACS,GAAD,OAAgBA,MAE9CL,GAAW,SAACK,GAAD,OAAgBA,OAC1B,CAACV,IAEEW,EAAiBF,uBACrB,YAAc,IAAXG,EAAU,EAAVA,IAID,OADY,MAARA,IAAaA,EAAM,SACfA,GACN,IAAK,UACHT,GAAO,SAACU,GAAD,OAAWA,EAAQ,KAC1B,MACF,IAAK,YACHV,GAAO,SAACU,GAAD,OAAWA,EAAQ,KAC1B,MACF,IAAK,aACHV,GAAO,SAACU,GAAD,OAAWA,EAAQ,MAC1B,MACF,IAAK,YACHV,GAAO,SAACU,GAAD,OAAWA,EAAQ,MAC1B,MACF,IAAK,QACHL,IAKJD,EAAiBK,GACjBE,YAAW,WACTP,EAAiB,QAChB,OAEL,CAACC,IAgBH,OAbAO,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWN,GAC5B,kBAAMK,OAAOE,oBAAoB,UAAWP,MAClD,CAACA,IAEJI,qBAAU,WACRX,EAAYf,IAAeQ,QAAUR,IAAe8B,SACnD,CAACf,IAEJW,qBAAU,WACR1B,IAAea,IAAIW,MAAQX,IAC1B,CAACA,IAGF,yBAAKkB,UAAU,OACb,iCACE,yBAAKA,UAAU,eAAelB,IAEhC,iCACE,yBAAKkB,UAAU,sBACb,yBACEA,UAAS,iCACW,UAAlBd,EAA4B,UAAY,MAE1Ce,QAAS,kBAAMV,EAAe,CAAEC,IAAK,YAEpCR,EAAY,OAAS,SAExB,yBAAKgB,UAAU,cACb,yBAAKA,UAAU,UACf,yBACEC,QAAS,kBAAMV,EAAe,CAAEC,IAAK,aACrCQ,UAAS,yBACW,YAAlBd,EAA8B,UAAY,OAG3C,SANH,OAQA,yBAAKc,UAAU,UACf,yBACEC,QAAS,kBAAMV,EAAe,CAAEC,IAAK,eACrCQ,UAAS,2BACW,cAAlBd,EAAgC,UAAY,OAHhD,iBAQA,yBACEe,QAAS,kBAAMV,EAAe,CAAEC,IAAK,eACrCQ,UAAS,2BACW,cAAlBd,EAAgC,UAAY,OAG7C,SANH,OAQA,yBACEe,QAAS,kBAAMV,EAAe,CAAEC,IAAK,gBACrCQ,UAAS,4BACW,eAAlBd,EAAiC,UAAY,OAG9C,SANH,aC5GNgB,EAAcC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,aAAwBrC,OAAOQ,SAAS8B,MACpDC,SAAWvC,OAAOQ,SAAS+B,OAIvC,OAGFvC,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMW,EAAK,UAAMyB,aAAN,sBAEP/B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BjB,OAAOQ,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.34fff9bb.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport * as Tone from 'tone';\nimport './App.css';\n\nconst synth = new Tone.MembraneSynth({\n  octaves: 1.08,\n  pitchDecay: 0.0125,\n  envelope: { release: 0.2 },\n}).toDestination();\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst loop = new Tone.Loop((time) => {\n  synth.triggerAttackRelease('C6', '32n', time);\n}, '4n').start();\n\nfunction App() {\n  const [haveSatisfiedUserInteraction, setSatisfiedUserInteraction] = useState(\n    false\n  );\n  const [bpm, setBpm] = useState(120);\n  const [isPlaying, setPlaying] = useState(false);\n  const [buttonPressed, setButtonPressed] = useState(null);\n\n  const togglePlay = useCallback(() => {\n    // satisfy browser's requirement for user interaction\n    // so AudioContext will be allowed to start\n    if (!haveSatisfiedUserInteraction) {\n      Tone.start();\n      setSatisfiedUserInteraction((prevState) => !prevState);\n    }\n    setPlaying((prevState) => !prevState);\n  }, [haveSatisfiedUserInteraction]);\n\n  const handleKeyPress = useCallback(\n    ({ key }) => {\n      // rename ' ' key to Space so we can use it as a\n      // className target in the DOM\n      if (key === ' ') key = 'Space';\n      switch (key) {\n        case 'ArrowUp':\n          setBpm((value) => value + 1);\n          break;\n        case 'ArrowDown':\n          setBpm((value) => value - 1);\n          break;\n        case 'ArrowRight':\n          setBpm((value) => value + 10);\n          break;\n        case 'ArrowLeft':\n          setBpm((value) => value - 10);\n          break;\n        case 'Space':\n          togglePlay();\n          break;\n        default:\n          break;\n      }\n      setButtonPressed(key);\n      setTimeout(() => {\n        setButtonPressed(null);\n      }, 100);\n    },\n    [togglePlay]\n  );\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  useEffect(() => {\n    isPlaying ? Tone.Transport.start() : Tone.Transport.stop();\n  }, [isPlaying]);\n\n  useEffect(() => {\n    Tone.Transport.bpm.value = bpm;\n  }, [bpm]);\n\n  return (\n    <div className='App'>\n      <section>\n        <div className='bpm-display'>{bpm}</div>\n      </section>\n      <section>\n        <div className='controls-container'>\n          <div\n            className={`left-side Space button ${\n              buttonPressed === 'Space' ? 'pressed' : null\n            }`}\n            onClick={() => handleKeyPress({ key: 'Space' })}\n          >\n            {isPlaying ? 'Stop' : 'Start'}\n          </div>\n          <div className='right-side'>\n            <div className='blank'></div>\n            <div\n              onClick={() => handleKeyPress({ key: 'ArrowUp' })}\n              className={`ArrowUp button ${\n                buttonPressed === 'ArrowUp' ? 'pressed' : null\n              }`}\n            >\n              {'\\u25B2'} +1\n            </div>\n            <div className='blank'></div>\n            <div\n              onClick={() => handleKeyPress({ key: 'ArrowLeft' })}\n              className={`ArrowLeft button ${\n                buttonPressed === 'ArrowLeft' ? 'pressed' : null\n              }`}\n            >\n              {`\\u25C0`} -10\n            </div>\n            <div\n              onClick={() => handleKeyPress({ key: 'ArrowDown' })}\n              className={`ArrowDown button ${\n                buttonPressed === 'ArrowDown' ? 'pressed' : null\n              }`}\n            >\n              {'\\u25BC'} -1\n            </div>\n            <div\n              onClick={() => handleKeyPress({ key: 'ArrowRight' })}\n              className={`ArrowRight button ${\n                buttonPressed === 'ArrowRight' ? 'pressed' : null\n              }`}\n            >\n              {'\\u25B6'} +10\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}